{"version":3,"file":"static/webpack/static/development/pages/_app.js.36a12a3fa6afae12de78.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport factory from \"../ethereum/factoryContract\";\nimport Layout from \"../components/layouts\";\nimport Router from \"next/router\";\nimport { getUserData, login, validate } from \"../services/authentication\";\nimport App, { Container } from \"next/app\";\nimport fetch from \"isomorphic-fetch\";\n\nexport default class MyApp extends App {\n  static async getInitialProps() {\n    const blockchainProjects = await factory.methods\n      .getDeployedCampaigns()\n      .call();\n    const projectsURL = \"http://localhost:3000/projects\";\n    let allProjectsResp = await fetch(projectsURL);\n    let allProjects = await allProjectsResp.json();\n    return { blockchainProjects, allProjects };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userData: {},\n      selectedProject: {},\n      allprojects: [],\n      supportContracts: [],\n      userSupport: []\n    };\n  }\n\n  componentDidMount() {\n    if (\n      localStorage.getItem(\"token\") &&\n      localStorage.getItem(\"token\") !== \"undefined\"\n    ) {\n      validate()\n        .then(resp => {\n          this.loggedIn(resp.token);\n        })\n        .catch(err => {\n          alert(err);\n        });\n    } else if (\n      this.props.router.route === \"/createproject\" ||\n      this.props.router.route === \"/myprofile\"\n    ) {\n      const href = \"/login\";\n      const as = href;\n      Router.push(href, as, { shallow: true });\n    }\n\n    this.getAllProjects().then(resp => this.setState({ allprojects: resp }));\n    this.getSupportContracts().then(resp => {\n      this.setState({ supportContracts: resp });\n    });\n  }\n\n  getAllProjects = () => {\n    const projectsURL = \"http://localhost:3000/projects\";\n    return fetch(projectsURL).then(resp => resp.json());\n  };\n\n  getSupportContracts = () => {\n    const supportContractsURL = \"http://localhost:3000/support_contracts\";\n    return fetch(supportContractsURL).then(resp => resp.json());\n  };\n\n  getUserSupport = () => {\n    const userContracts = this.state.supportContracts.filter(\n      contract => contract.user_id === this.state.userData.id\n    );\n\n    let userProjects = userContracts\n      .map(contract => {\n        return this.state.allprojects.filter(project => {\n          return contract.project_id === project.id;\n        });\n      })\n      .flat();\n\n    Array.prototype.unique = function() {\n      return this.filter(function(value, index, self) {\n        return self.indexOf(value) === index;\n      });\n    };\n    const uniqueUserProjects = userProjects.unique();\n    this.setState({ userSupport: uniqueUserProjects });\n  };\n\n  loggedIn = token => {\n    localStorage.setItem(\"token\", token);\n    getUserData()\n      .then(resp => {\n        this.setState({ userData: resp });\n      })\n      .then(() => this.getUserSupport());\n  };\n\n  logout = () => {\n    localStorage.removeItem(\"token\");\n    Router.push(\"/\", \"/\", { shallow: true }).then(() => {\n      this.setState({\n        userData: {}\n      });\n    });\n  };\n\n  deployProject = project => {\n    this.setState({ allprojects: [...this.state.allprojects, project] });\n  };\n\n  selectProject = project => {\n    this.setState({ selectedProject: project });\n  };\n\n  getNewProjectBlockchainAddress = async function() {\n    const blockchainProjects = await factory.methods\n      .getDeployedCampaigns()\n      .call();\n    this.setState({ blockchainProjects: blockchainProjects });\n  };\n\n  updateCreatedProjectsOnFrontend = () => {\n    const { created_projects } = this.state.userData;\n    const newCreatedProjects = [\n      ...created_projects,\n      this.state.selectedProject\n    ];\n    this.setState({ userData: { ...this.state.userData, newCreatedProjects } });\n  };\n\n  updateUserSupportedProjects = project => {\n    this.setState({ userSupport: [...this.state.userSupport, project] });\n    Array.prototype.unique = function() {\n      return this.filter(function(value, index, self) {\n        return self.indexOf(value) === index;\n      });\n    };\n    let newSupport = this.state.userSupport.unique();\n    this.setState({ userSupport: newSupport });\n  };\n\n  updateUserData = (firstName, lastName, email) => {\n    this.setState({\n      userData: {\n        ...this.state.userData,\n        first_name: firstName,\n        last_name: lastName,\n        email: email\n      }\n    });\n  };\n\n  render() {\n    const { Component } = this.props;\n    return (\n      <Layout\n        userData={this.state.userData}\n        logout={this.logout}\n        selectProject={this.selectProject}\n        router={this.props.router}\n        allProjects={this.props.allProjects}\n        login={this.props.loggedIn}>\n        <Component\n          blockchainProjects={this.props.blockchainProjects}\n          userData={this.state.userData}\n          login={this.loggedIn}\n          selectedProject={this.state.selectedProject}\n          selectProject={this.selectProject}\n          getNewProjectBlockchainAddress={this.getNewProjectBlockchainAddress}\n          allProjects={this.props.allProjects}\n          changeSelectedProject={this.changeSelectedProject}\n          deployProject={this.deployProject}\n          router={this.props.router}\n          updateCreatedProjectsOnFrontend={this.updateCreatedProjectsOnFrontend}\n          supportContracts={this.state.supportContracts}\n          userSupport={this.state.userSupport}\n          addToUserSupportedProjects={this.updateUserSupportedProjects}\n          updateUserData={this.updateUserData}\n          getUserSupport={this.getUserSupport}\n        />\n      </Layout>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;;AADA;AAGA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAwCA;AACA;AAAA;AAAA;AACA;AACA;AA3CA;AA6CA;AACA;AAAA;AAAA;AACA;AACA;AAhDA;AAkDA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAtEA;AAwEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AA/EA;AAiFA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAxFA;AA0FA;AAAA;AAAA;AACA;AACA;AA5FA;AA8FA;AAAA;AAAA;AACA;AACA;AAhGA;AAAA;AAAA;AAAA;AAAA;AAiGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlGA;AAwGA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAhHA;AAkHA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA3HA;AA6HA;AACA;AAEA;AACA;AACA;AAJA;AADA;AAQA;AACA;AAnIA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAUA;AACA;;;AACA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAkGA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAoBA;;;;AAhLA;AACA;;;;;A","sourceRoot":""}