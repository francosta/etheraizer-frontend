{"version":3,"file":"static/webpack/static/development/pages/_app.js.776e6b26c75788fdc7e0.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport factory from \"../ethereum/factoryContract\";\nimport Layout from \"../components/layouts\";\nimport Router from \"next/router\";\nimport { getUserData, login, validate } from \"../services/authentication\";\nimport App, { Container } from \"next/app\";\n\nexport default class MyApp extends App {\n  static async getInitialProps() {\n    const blockchainProjects = await factory.methods\n      .getDeployedCampaigns()\n      .call();\n    return { blockchainProjects };\n  }\n\n  componentDidMount() {\n    if (\n      localStorage.getItem(\"token\") &&\n      localStorage.getItem(\"token\") !== \"undefined\"\n    ) {\n      validate()\n        .then(resp => {\n          this.loggedIn(resp.token);\n        })\n        .catch(err => {\n          alert(err);\n        });\n    } else {\n      Router.push(\"/login\");\n    }\n\n    // const projectsURL = \"http://localhost:3000/projects\";\n    // return fetch(projectsURL)\n    //   .then(resp => resp.json())\n    //   .then(resp => this.setState({ allProjects: resp }));\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userData: {},\n      selectedProject: {},\n      allProjects: {}\n    };\n  }\n\n  loggedIn = token => {\n    localStorage.setItem(\"token\", token);\n    getUserData().then(resp => this.setState({ userData: resp }));\n    Router.push(\"/\");\n  };\n\n  logout = () => {\n    this.setState({\n      userdata: {}\n    });\n    localStorage.removeItem(\"token\");\n    Router.push(\"/login\");\n  };\n\n  deployProject = project => {\n    this.setState({ allProjects: [...this.state.allProjects, project] });\n  };\n\n  selectProject = project => {\n    this.setState({ selectedProject: project });\n  };\n\n  getNewProjectBlockchainAddress = async function() {\n    const blockchainProjects = await factory.methods\n      .getDeployedCampaigns()\n      .call();\n    this.setState({ blockchainProjects: blockchainProjects });\n  };\n\n  render() {\n    const { Component } = this.props;\n    return (\n      <Layout\n        userData={this.state.userData}\n        logout={this.logout}\n        selectProject={this.selectProject}>\n        <Component\n          blockchainProjects={this.props.blockchainProjects}\n          userData={this.state.userData}\n          login={this.loggedIn}\n          selectedProject={this.state.selectedProject}\n          selectProject={this.selectProject}\n          getNewProjectBlockchainAddress={this.getNewProjectBlockchainAddress}\n          allProjects={this.state.allProjects}\n          changeSelectedProject={this.changeSelectedProject}\n          deployProject={this.deployProject}\n        />\n      </Layout>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;AA1BA;AACA;;AADA;AAGA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAwBA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAvBA;AAyBA;AAAA;AAAA;AACA;AACA;AA3BA;AA6BA;AAAA;AAAA;AACA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA9BA;AACA;AACA;AACA;AAHA;AAHA;AAQA;AACA;;;AA8BA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAaA;;;;AAzFA;AACA;;;;;A","sourceRoot":""}