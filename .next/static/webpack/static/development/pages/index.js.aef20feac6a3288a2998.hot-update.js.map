{"version":3,"file":"static/webpack/static/development/pages/index.js.aef20feac6a3288a2998.hot-update.js","sources":["webpack:///./components/SignUpForm.js","webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Message,\n  Segment,\n  Input\n} from \"semantic-ui-react\";\nimport { login } from \"../services/authentication\";\nimport Router from \"next/router\";\n\nexport default class SignUpForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const firstName = e.target.firstName.value;\n    const lastName = e.target.lastName.value;\n    const email = e.target.email.value;\n    const password = e.target.password.value;\n    const passwordConfirmation = e.target.passwordConfirmation.value;\n    const newUser = {\n      first_name: firstName,\n      last_name: lastName,\n      email: email,\n      password: password\n    };\n    if (\n      firstName === \"\" ||\n      lastName === \"\" ||\n      email === \"\" ||\n      password === \"\" ||\n      passwordConfirmation === \"\"\n    ) {\n      this.setState({ error: \"All fields are mandatory\" });\n    } else if (password !== passwordConfirmation) {\n      this.setState({ error: \"The passwords do not match.\" });\n    } else {\n      this.setState({ error: null });\n      this.signUp(newUser);\n    }\n  };\n\n  signUp = user => {\n    const signUpURL = \"http://localhost:3000/users\";\n    const options = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        user\n      })\n    };\n\n    try {\n      return fetch(signUpURL, options)\n        .then(resp => resp.json())\n        .then(resp => {\n          login(user.email, user.password).then(resp =>\n            this.props.login(resp.token)\n          );\n          const href = \"/\";\n          const as = href;\n          Router.push(href, as, { shallow: true });\n        });\n    } catch (err) {\n      this.setState({ error: err });\n    }\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100vh\" }}\n        verticalAlign=\"middle\">\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Image\n            verticalAlign=\"middle\"\n            src=\"https://github.com/francosta/etheraizer-frontend/raw/development/public/logo.png\"\n          />\n          <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n            Create a new account\n          </Header>\n          <br />\n          <Form\n            error={this.state.error}\n            onSubmit={this.handleSubmit}\n            size=\"large\">\n            <Form.Group widths=\"equal\">\n              <Form.Field inline>\n                {/* <label>First name</label> */}\n                <Input name=\"firstName\" fluid placeholder=\"First name\" />\n              </Form.Field>\n              <Form.Field inline>\n                {/* <label>Last name</label> */}\n                <Input name=\"lastName\" fluid placeholder=\"Last name\" />\n              </Form.Field>\n            </Form.Group>\n            <Form.Group widths=\"equal\">\n              <Form.Field inline>\n                {/* <label>Email</label> */}\n                <Input name=\"email\" fluid placeholder=\"Email\" />\n              </Form.Field>\n            </Form.Group>\n            <Form.Group widths=\"equal\">\n              <Form.Field inline>\n                {/* <label>Email</label> */}\n                <Input\n                  name=\"password\"\n                  type=\"password\"\n                  fluid\n                  placeholder=\"Password\"\n                />\n              </Form.Field>\n            </Form.Group>\n            <Form.Group widths=\"equal\">\n              <Form.Field inline>\n                {/* <label>Email</label> */}\n                <Input\n                  name=\"passwordConfirmation\"\n                  type=\"password\"\n                  fluid\n                  placeholder=\"Confirm your password\"\n                />\n              </Form.Field>\n            </Form.Group>\n            <Message error content=\"The passwords do not match..\" />\n            <Button color=\"teal\" fluid size=\"large\">\n              Create an account\n            </Button>\n          </Form>\n          <Message>\n            Already have an account? <a href=\"/login\">Login</a>\n          </Message>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport factory from \"../ethereum/factoryContract\";\nimport Layout from \"../components/layouts\";\nimport Router from \"next/router\";\nimport { validate } from \"../services/authentication\";\nimport Login from \"./login\";\nimport {\n  Container,\n  Image,\n  Segment,\n  Rail,\n  Header,\n  Grid\n} from \"semantic-ui-react\";\nimport SignUpForm from \"../components/SignUpForm\";\n\nexport default class Index extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <Image src=\"https://github.com/francosta/etheraizer-frontend/raw/development/public/homepage.png\" />\n        </div>\n        <Grid columns={2}>\n          <Grid.Column>\n            <h1>Get your project funded in 4 simple steps!</h1>\n          </Grid.Column>\n          <Grid.Column>\n            <Image src=\"https://github.com/francosta/etheraizer-frontend/raw/development/public/homepage.png\" />\n          </Grid.Column>\n        </Grid>\n        <Grid columns={2}>\n          <Grid.Column>\n            <Image src=\"https://github.com/francosta/etheraizer-frontend/raw/development/public/homepage.png\" />\n          </Grid.Column>\n          <Grid.Column>\n            <h1>Connect your Ethereum wallet</h1>\n          </Grid.Column>\n        </Grid>\n        <Grid columns={2}>\n          <Grid.Column>\n            <h1>Create, Deploy, Achieve!</h1>\n          </Grid.Column>\n          <Grid.Column>\n            <Image src=\"https://github.com/francosta/etheraizer-frontend/raw/development/public/homepage.png\" />\n          </Grid.Column>\n        </Grid>\n        <SignUpForm />\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAOA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AApCA;AAsCA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAHA;AACA;AAOA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA3DA;AACA;AADA;AAHA;AAMA;AACA;;;AAwDA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAIA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAKA;;;;AApIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AAGA;AAAA;AAEA;AAAA;AAKA;AAAA;AAGA;AAAA;AAEA;AAAA;AAMA;AAAA;AAKA;AAAA;AAMA;;;;AAlCA;AACA;;;;;A","sourceRoot":""}