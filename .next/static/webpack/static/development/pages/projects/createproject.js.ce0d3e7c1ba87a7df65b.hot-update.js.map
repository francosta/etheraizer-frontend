{"version":3,"file":"static/webpack/static/development/pages/projects/createproject.js.ce0d3e7c1ba87a7df65b.hot-update.js","sources":["webpack:///./components/CreateProjectForm.js","webpack:///./pages/projects/createproject.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  Input,\n  Dropdown,\n  Message,\n  Segment,\n  Dimmer,\n  Loader,\n  Transition\n} from \"semantic-ui-react\";\n\nexport default class CreateProjectForm extends Component {\n  render() {\n    const formOptions = [\n      { key: \"wei\", text: \"wei\", value: \"wei\" },\n      { key: \"ether\", text: \"Ξ ether\", value: \"ether\" },\n      { key: \"dollars\", text: \"$\", value: \"dollars\" },\n      { key: \"euros\", text: \"€\", value: \"euros\" },\n      { key: \"pounds\", text: \"£\", value: \"wei\" }\n    ];\n    return (\n      <div>\n        <h2>Create your Project</h2>\n        <div>\n          <h4>Please fill in the form below to create your project:</h4>\n          <Segment>\n            <Transition\n              visible={this.props.creatingProject}\n              animation=\"scale\"\n              duration={500}>\n              <Dimmer active={this.props.creatingProject}>\n                <Loader indeterminate>\n                  Attempting to deploy project's contract into the Ethereum\n                  blockchain.\n                  <br />\n                  Please wait...\n                </Loader>\n              </Dimmer>\n            </Transition>\n\n            <Form\n              onSubmit={this.props.handleSubmit}\n              error={!!this.props.errorMessage}>\n              <Form.Field required name=\"projectTitle\">\n                <label>Project Title</label>\n                <Input name=\"projectTitle\" placeholder=\"Project Title\" />\n              </Form.Field>\n              <Form.Field required>\n                <label>Description</label>\n                <Input\n                  name=\"description\"\n                  labelPosition=\"right\"\n                  placeholder=\"Project Description\"\n                />\n              </Form.Field>\n              <Form.Field required>\n                <label>Goal</label>\n                <Input\n                  name=\"goal\"\n                  label={<Dropdown defaultValue=\"wei\" options={formOptions} />}\n                  labelPosition=\"right\"\n                  placeholder=\"Funding Goal\"\n                />\n              </Form.Field>\n              <Message\n                color=\"red\"\n                size=\"small\"\n                compact\n                warning\n                error\n                header=\"Oh oh!\"\n                content={this.props.errorMessage}\n              />\n              <br />\n              <Button type=\"submit\">Create Project</Button>\n            </Form>\n          </Segment>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport factory from \"../../ethereum/factoryContract\";\nimport ProjectCreationProgressComponent from \"../../components/ProjectCreationProgressComponent\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\nimport CreateProjectForm from \"../../components/CreateProjectForm\";\nimport DeployProjectForm from \"../../components/DeployProjectForm\";\n\nexport default class createproject extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errorMessage: \"\",\n      creatingProject: false,\n      terms: false,\n      projectStatus: \"funded\"\n    };\n  }\n\n  handleSubmit = async e => {\n    e.persist();\n    e.preventDefault();\n\n    if (this.state.terms === false) {\n      return this.setState({\n        errorMessage:\n          \"You need to accept the terms conditions before creating a project.\"\n      });\n    }\n\n    const accounts = await web3.eth.getAccounts();\n    const projectTitle = e.target.projectTitle.value;\n    const minimumContribution = e.target.minimumContribution.value;\n\n    console.log(`Project Title: ${projectTitle}`);\n    console.log(`Minimum Contribution: ${minimumContribution}`);\n\n    this.setState({ creatingProject: true });\n    try {\n      await factory.methods\n        .createCampaign(minimumContribution)\n        .send({ from: accounts[0] });\n      Router.pushRoute(\"/\");\n    } catch (thrownError) {\n      this.setState({ errorMessage: thrownError.message });\n    }\n    this.setState({ creatingProject: false });\n  };\n\n  handleCheck = () => {\n    this.setState({ terms: !this.state.terms });\n  };\n\n  //Render the createProject component\n  render() {\n    if (!this.props.selectedProject) {\n      return (\n        <div>\n          <ProjectCreationProgressComponent\n            selectedProject={this.props.selectedProject}\n          />\n          <CreateProjectForm\n            handleSubmit={this.handleSubmit}\n            errorMessage={this.state.errorMessage}\n            handleCheck={this.handleCheck}\n            terms={this.state.terms}\n            creatingProject={this.state.creatingProject}\n          />\n        </div>\n      );\n    } else if (this.props.selectedProject.status === \"created\") {\n      return (\n        <div>\n          <ProjectCreationProgressComponent\n            selectedProject={this.props.selectedProject}\n          />\n          <DeployProjectForm\n            handleSubmit={this.handleSubmit}\n            errorMessage={this.state.errorMessage}\n            handleCheck={this.handleCheck}\n            terms={this.state.terms}\n            creatingProject={this.state.creatingProject}\n          />\n        </div>\n      );\n    } else\n      return (\n        <div>\n          <ProjectCreationProgressComponent\n            selectedProject={this.props.selectedProject}\n          />\n          <DeployProjectForm\n            handleSubmit={this.handleSubmit}\n            errorMessage={this.state.errorMessage}\n            handleCheck={this.handleCheck}\n            terms={this.state.terms}\n            creatingProject={this.state.creatingProject}\n          />\n        </div>\n      );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAWA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AAHA;AAIA;AAAA;AACA;AAAA;AAUA;AACA;AAFA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AAHA;AAMA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AAMA;;;;AArEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAMA;AADA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAnBA;AAAA;AAAA;AAsBA;AAAA;AACA;AAvBA;AAuBA;AAvBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAwBA;AAAA;AAAA;AACA;AA1BA;AA2BA;AAAA;AAAA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AACA;AADA;AA0CA;AAAA;AAAA;AACA;AACA;AAzCA;AACA;AACA;AACA;AACA;AAJA;AAHA;AASA;AACA;;;AAmCA;AACA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AALA;AASA;AAIA;AADA;AAIA;AACA;AACA;AACA;AACA;AALA;AASA;;;;AA7FA;AACA;;;;;A","sourceRoot":""}