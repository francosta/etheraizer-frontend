{"version":3,"file":"static/webpack/static/development/pages/projects/createproject.js.3ad9156e5f8bd7557e5a.hot-update.js","sources":["webpack:///./components/CreateProjectForm.js","webpack:///./components/DeployProjectForm.js","webpack:///./components/ProjectCreationProgressComponent.js","webpack:///./ethereum/factoryContract.js","webpack:///./ethereum/web3.js","webpack:///./pages/projects/createproject.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  Input,\n  Dropdown,\n  Message,\n  Segment,\n  Dimmer,\n  Loader,\n  Transition\n} from \"semantic-ui-react\";\n\nexport default class CreateProjectForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errorMessage: \"\",\n      terms: false\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const newTitle = e.target.projectTitle.value;\n    const newDescription = e.target.description.value;\n    const newGoal = e.target.goal.value;\n\n    const project = {\n      title: newTitle,\n      description: newDescription,\n      goal: newGoal,\n      user_id: this.props.userData.id,\n      blockchain_address: \"\",\n      status: \"created\"\n    };\n\n    const createURL = \"http://localhost:3000/projects\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(project)\n    };\n\n    return fetch(createURL, options)\n      .then(resp => resp.json())\n      .then(newProject => {\n        this.props.selectProject(newProject);\n      });\n  };\n\n  render() {\n    const formOptions = [\n      { key: \"wei\", text: \"wei\", value: \"wei\" },\n      { key: \"ether\", text: \"Ξ ether\", value: \"ether\" },\n      { key: \"dollars\", text: \"$\", value: \"dollars\" },\n      { key: \"euros\", text: \"€\", value: \"euros\" },\n      { key: \"pounds\", text: \"£\", value: \"wei\" }\n    ];\n    return (\n      <div>\n        <h2>Create your Project</h2>\n        <div>\n          <h4>Please fill in the form below to create your project:</h4>\n          <Segment>\n            <Form\n              onSubmit={this.handleSubmit}\n              error={!!this.props.errorMessage}>\n              <Form.Field required name=\"projectTitle\">\n                <label>Project Title</label>\n                <Input name=\"projectTitle\" placeholder=\"Project Title\" />\n              </Form.Field>\n              <Form.Field required>\n                <label>Description</label>\n                <Input\n                  name=\"description\"\n                  labelPosition=\"right\"\n                  placeholder=\"Project Description\"\n                />\n              </Form.Field>\n              <Form.Field required>\n                <label>Goal</label>\n                <Input\n                  name=\"goal\"\n                  label={<Dropdown defaultValue=\"wei\" options={formOptions} />}\n                  labelPosition=\"right\"\n                  placeholder=\"Funding Goal\"\n                />\n              </Form.Field>\n              <Message\n                color=\"red\"\n                size=\"small\"\n                compact\n                warning\n                error\n                header=\"Oh oh!\"\n                content={this.props.errorMessage}\n              />\n              <br />\n              <Button type=\"submit\">Create Project</Button>\n            </Form>\n          </Segment>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Checkbox,\n  Form,\n  Input,\n  Dropdown,\n  Message,\n  Segment,\n  Dimmer,\n  Loader,\n  Transition,\n  Step\n} from \"semantic-ui-react\";\nimport factory from \"../ethereum/factoryContract\";\nimport web3 from \"../ethereum/web3\";\n\nexport default class DeployProjectForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errorMessage: \"\",\n      creatingProject: false,\n      terms: false,\n      projectStatus: \"funded\"\n    };\n  }\n\n  handleCheck = () => {\n    this.setState({ terms: !this.state.terms });\n  };\n\n  // handleSubmit = () => {\n  //   setTimeout(this.props.getNewProjectBlockchainAddress(), 45000);\n  //   this.getAddressForNewProject();\n  // };\n\n  handleSubmit = async e => {\n    e.persist();\n    e.preventDefault();\n\n    if (this.state.terms === false) {\n      return this.setState({\n        errorMessage:\n          \"You need to accept the terms conditions before creating a project.\"\n      });\n    }\n\n    const accounts = await web3.eth.getAccounts();\n    const projectTitle = e.target.projectTitle.value;\n    const minimumContribution = e.target.minimumContribution.value;\n\n    this.setState({ creatingProject: true });\n    try {\n      await factory.methods\n        .createCampaign(minimumContribution)\n        .send({ from: accounts[1], gas: \"1000000\" })\n        .then(resp => console.log(resp));\n      this.getAddressForNewProject();\n    } catch (thrownError) {\n      this.setState({ errorMessage: thrownError.message });\n    }\n    this.setState({ creatingProject: false });\n  };\n\n  getAddressForNewProject = async function() {\n    const addresses = await factory.methods.getDeployedCampaigns().call();\n    let selectedProjectAddress;\n    let project;\n    selectedProjectAddress = addresses[addresses.length - 1];\n    project = this.props.selectedProject;\n    project.blockchain_address = selectedProjectAddress;\n    project.status = \"deployed\";\n    this.props.selectProject(project);\n    this.updateProjectOnDatabase(project);\n  };\n\n  updateProjectOnDatabase = project => {\n    const updateURL = `http://localhost:3000/projects/${project.id}`;\n    const options = {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(project)\n    };\n\n    return fetch(updateURL, options).then(resp => resp.json());\n  };\n\n  render() {\n    const formOptions = [\n      { key: \"wei\", text: \"wei\", value: \"wei\" },\n      { key: \"ether\", text: \"Ξ ether\", value: \"ether\" }\n    ];\n    return (\n      <div>\n        <h2>Deploy your project to the Blockchain</h2>\n        <h3>Your project was created. Now, deploy it to the blockchain.</h3>\n        <div>\n          <h4>Please fill in the form below to deploy your project:</h4>\n          <Segment>\n            <Transition\n              visible={this.state.creatingProject}\n              animation=\"scale\"\n              duration={500}>\n              <Dimmer active={this.state.creatingProject}>\n                <Loader indeterminate>\n                  Attempting to deploy project's contract into the Ethereum\n                  blockchain.\n                  <br />\n                  Please wait...\n                </Loader>\n              </Dimmer>\n            </Transition>\n\n            <Form\n              onSubmit={this.handleSubmit}\n              error={!!this.state.errorMessage}>\n              <Form.Field disabled name=\"projectTitle\">\n                <label>Project Title</label>\n                <Input\n                  name=\"projectTitle\"\n                  value={this.props.selectedProject.title}\n                />\n              </Form.Field>\n              <Form.Field required>\n                <label>Minimum Contribution</label>\n                <Input\n                  name=\"minimumContribution\"\n                  label={<Dropdown defaultValue=\"wei\" options={formOptions} />}\n                  labelPosition=\"right\"\n                  placeholder=\"Minimum Contribution\"\n                />\n              </Form.Field>\n              <Form.Field required>\n                <Checkbox\n                  checked={this.state.terms}\n                  onChange={this.handleCheck}\n                  label=\"I agree to the Terms and Conditions\"\n                />\n              </Form.Field>\n              <Message\n                color=\"red\"\n                size=\"small\"\n                compact\n                warning\n                error\n                header=\"Oh oh!\"\n                content={this.state.errorMessage}\n              />\n              <br />\n              <Button type=\"submit\">Create Project</Button>\n            </Form>\n          </Segment>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Step } from \"semantic-ui-react\";\n\nexport default function ProjectCreationProgressComponent(props) {\n  return (\n    <Step.Group ordered>\n      <Step\n        active={props.selectedProject}\n        completed={\n          props.selectedProject.status === \"created\" ||\n          props.selectedProject.status === \"deployed\" ||\n          props.selectedProject.status === \"achieve\"\n        }>\n        <Step.Content>\n          <Step.Title>Create</Step.Title>\n          <Step.Description>Create and pitch your project</Step.Description>\n        </Step.Content>\n      </Step>\n      <Step\n        active={props.selectedProject.status === \"created\"}\n        completed={\n          props.selectedProject.status === \"achieve\" ||\n          props.selectedProject.status === \"funded\"\n        }>\n        <Step.Content>\n          <Step.Title>Deploy</Step.Title>\n          <Step.Description>\n            Deploy your project to the Blockchain\n          </Step.Description>\n        </Step.Content>\n      </Step>\n\n      <Step\n        active={props.selectedProject.status === \"achieve\"}\n        completed={props.selectedProject.status === \"funded\"}>\n        <Step.Content>\n          <Step.Title>Achieve</Step.Title>\n          <Step.Description>Reach your funding goal</Step.Description>\n        </Step.Content>\n      </Step>\n    </Step.Group>\n  );\n}\n","// This file has the goal of creating a javascript instance of the deployed contract.\n// After this is setup we can just import it into any other file and use it as if it were a js class with all the methods available to us.\n\n// Get created instance of web3\nimport web3 from \"./web3\";\n\n//Get deployed contract's ABI\nimport ProjectFactory from \"./build/CampaignFactory.json\";\n\n// Create an instance of the contract with the deployed contract's address\nconst contractInstance = new web3.eth.Contract(\n  JSON.parse(ProjectFactory.interface),\n  \"0xD474898217b36829585E4261080e4eEb2E9c676A\"\n);\n\nexport default contractInstance;\n","//Configure and create an instance of web3 by finding which provider we will use.\n// The goal of this file is to have web3 = new Web3(PROVIDER_WHICH_WE_WILL_FIND)\nimport Web3 from \"web3\";\n\n// Initialize the web3 variable.\nlet web3;\n\n// To define where we will get the instance of web3 from (server or browser), we need to check whether the code is running on the browser or the server and then, if it is running on the browser, if Metamask exists and is already injecting web3 in the browser.\n// We do that by checking if the typeof window is defined. If it is, then it means that a window exists and, as such, that we are in a browser environment.\n// If not, it means that we are running outside of a browser and, as such, our code is running on the server.\n// In the case that we are not in the browser or Metamask is not running, then we need to setup our own provider, through Infura (which connects us to a node within the ETH network).\n\n//the first condition will check for the existence of a browser. The second condition checks if web3 is in the window (which means Metamask is in place).\nif (typeof window !== \"undefined\" && typeof window.web3 !== \"undefined\") {\n  //We are in the browser and Metamask is running\n  const web3BrowserProvider = window.web3.currentProvider;\n\n  const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n  // Due to Metamask's new scurity measures we first need to enable the provider before instantiating web3 with it\n  const getProvider = async () => {\n    await web3BrowserProvider.enable(); // request authentication\n  };\n  getProvider();\n  const OPTIONS = {\n    defaultBlock: \"latest\",\n    transactionConfirmationBlocks: 1,\n    transactionBlockTimeout: 5\n  };\n\n  web3 = new Web3(provider, null, OPTIONS);\n} else {\n  // We are not in the browser or Metamask is not running.\n  // We need to set up our own provider, using the Rinkeby Eth network, through Infura (using the link that we were provided with).\n  const web3ServerProvider = new Web3.providers.HttpProvider(\n    \"https://rinkeby.infura.io/v3/c8d80c1c979446a7b1b3ebe2f3729ec9\"\n  );\n\n  const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n  const OPTIONS = {\n    defaultBlock: \"latest\",\n    transactionConfirmationBlocks: 1,\n    transactionBlockTimeout: 5\n  };\n  web3 = new Web3(provider, null, OPTIONS);\n  // web3 = new Web3(web3ServerProvider);\n}\n// const web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;\n","import React, { Component } from \"react\";\nimport ProjectCreationProgressComponent from \"../../components/ProjectCreationProgressComponent\";\nimport { Router } from \"../../routes\";\nimport CreateProjectForm from \"../../components/CreateProjectForm\";\nimport DeployProjectForm from \"../../components/DeployProjectForm\";\n\nexport default class createproject extends Component {\n  //Render the createProject component\n  render() {\n    if (!this.props.selectedProject.status) {\n      return (\n        <div>\n          <ProjectCreationProgressComponent\n            selectedProject={this.props.selectedProject}\n          />\n          <CreateProjectForm\n            userData={this.props.userData}\n            selectProject={this.props.selectProject}\n          />\n        </div>\n      );\n    } else if (this.props.selectedProject.status === \"created\") {\n      return (\n        <div>\n          <ProjectCreationProgressComponent\n            selectedProject={this.props.selectedProject}\n          />\n          <DeployProjectForm\n            selectedProject={this.props.selectedProject}\n            getNewProjectBlockchainAddress={\n              this.props.getNewProjectBlockchainAddress\n            }\n            blockchainProjects={this.props.blockchainProjects}\n            selectProject={this.props.selectProject}\n          />\n        </div>\n      );\n    } else if (this.props.selectedProject.status === \"deployed\") {\n      return (\n        <div>\n          <ProjectCreationProgressComponent\n            selectedProject={this.props.selectedProject}\n          />\n          <DeployProjectForm\n            selectedProject={this.props.selectedProject}\n            getNewProjectBlockchainAddress={\n              this.props.getNewProjectBlockchainAddress\n            }\n            blockchainProjects={this.props.blockchainProjects}\n            selectProject={this.props.selectProject}\n            changeSelectedProject={this.props.changeSelectedProject}\n          />\n        </div>\n      );\n    }\n  }\n}\n"],"mappings":"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","sourceRoot":""}