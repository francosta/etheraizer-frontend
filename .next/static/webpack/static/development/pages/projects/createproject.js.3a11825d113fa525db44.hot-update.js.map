{"version":3,"file":"static/webpack/static/development/pages/projects/createproject.js.3a11825d113fa525db44.hot-update.js","sources":["webpack:///./components/ContributeForm.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport projectContract from \"../ethereum/projectContract\";\nimport {\n  Button,\n  Header,\n  Image,\n  Modal,\n  Form,\n  Checkbox,\n  Container,\n  Message,\n  Icon,\n  Transition,\n  Dimmer,\n  Loader,\n  Segment\n} from \"semantic-ui-react\";\nimport web3 from \"../ethereum/web3\";\n\nclass ContributeForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false,\n      errorMsg: null,\n      terms: false,\n      contributing: false\n    };\n  }\n\n  show = dimmer => () => this.setState({ dimmer, open: true });\n  close = () => this.setState({ open: false });\n\n  handleCheck = () => {\n    this.setState({ terms: !this.state.terms });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const contribution = parseInt(e.target[0].value);\n    const minimumContribution = this.props.minimumContribution;\n    const project = projectContract(\n      this.props.selectedProject.blockchain_address\n    );\n\n    if (this.state.terms === false) {\n      this.setState({\n        errorMsg:\n          \"You need to accept the terms conditions before creating a project.\"\n      });\n    } else if (contribution < minimumContribution) {\n      this.setState({\n        errorMsg:\n          \"Your contribution is below the minimum contribution for this project.\"\n      });\n    } else {\n      try {\n        this.setState({ contributing: true });\n        //Check units of currency\n        const accounts = await web3.eth.getAccounts();\n        await project.methods.contribute().send({\n          from: accounts[0],\n          value: contribution\n        });\n        this.setState({ contributing: false, open: false });\n        this.updateSelectedProject();\n        this.props.updateDataOnFrontend(contribution);\n        this.createSupportContractinDatabase(\n          this.props.selectedProject.id,\n          this.props.userData.id,\n          contribution\n        );\n      } catch (err) {\n        this.setState({ errorMsg: err, contributing: false, open: false });\n      }\n    }\n  };\n\n  createSupportContractinDatabase = (project_id, user_id, contribution) => {\n    const projectId = project_id;\n    const userId = user_id;\n    const contractContribution = contribution;\n    const supportContract = {\n      user_id: userId,\n      project_id: projectId,\n      value: contribution\n    };\n    const supportContractURL = \"http://localhost:3000/support_contracts\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(supportContract)\n    };\n\n    return fetch(supportContractURL, options).then(resp => resp.json());\n  };\n\n  updateSelectedProject = () => {\n    const id = this.props.selectedProject.id;\n    const updateProjectURL = `http://localhost:3000/projects${id}`;\n    let progress = (this.props.balance / this.props.selectedProject.goal) * 100;\n    if (progress > 100) {\n      progress = 100;\n    }\n    const options = {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ progress: progress })\n    };\n\n    return fetch(updateProjectURL, options).then(resp => resp.json());\n  };\n\n  render() {\n    const { open, dimmer } = this.state;\n\n    return (\n      <div>\n        <Button onClick={this.show(\"blurring\")}>Contribute</Button>\n\n        <Modal dimmer={dimmer} open={open} onClose={this.close} centered={true}>\n          <Segment>\n            <Transition\n              visible={this.state.contributing}\n              animation=\"scale\"\n              duration={500}>\n              <Dimmer active={this.state.contributing}>\n                <Loader indeterminate>\n                  Attempting to send your contribution to the Ethereum\n                  blockchain.\n                  <br />\n                  Please wait...\n                </Loader>\n              </Dimmer>\n            </Transition>\n            <Modal.Header>Make a contribution</Modal.Header>\n            <Modal.Content image>\n              <Icon name=\"check circle\" size=\"huge\" color=\"green\" />\n              <Modal.Description>\n                <Header as=\"h2\">{this.props.selectedProject.title}</Header>\n                <Container fluid>\n                  <Header as=\"h3\">Description</Header>\n                  <p>{this.props.selectedProject.description}</p>\n                  <br />\n                </Container>\n                <Form error={this.state.errorMsg} onSubmit={this.handleSubmit}>\n                  <Form.Field>\n                    <label>How much do you want to contribute?</label>\n                    <input\n                      name=\"contribution\"\n                      placeholder=\"Your contribution\"\n                    />\n                  </Form.Field>\n                  <Message\n                    color=\"red\"\n                    size=\"small\"\n                    compact\n                    warning\n                    error\n                    header=\"Oh oh!\"\n                    content={this.state.errorMsg}\n                  />\n                  <Form.Field>\n                    <Checkbox\n                      checked={this.state.terms}\n                      onChange={this.handleCheck}\n                      label=\"I agree to the Terms and Conditions\"\n                    />\n                  </Form.Field>\n\n                  <Button color=\"black\" onClick={this.close} type=\"button\">\n                    I changed my mind!\n                  </Button>\n                  <Button\n                    positive\n                    icon=\"checkmark\"\n                    labelPosition=\"right\"\n                    content=\"Contribute!\"\n                    type=\"submit\"\n                  />\n                </Form>\n              </Modal.Description>\n            </Modal.Content>\n            <Modal.Actions />\n          </Segment>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default ContributeForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAeA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAZA;AAYA;AAAA;AAAA;AAAA;AACA;AAbA;AAeA;AAAA;AAAA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AADA;AACA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AADA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AACA;AAmBA;AAAA;AAAA;AACA;AACA;AAtBA;AAAA;AACA;AADA;AAsBA;AAtBA;AAAA;AAwBA;AACA;AAFA;AACA;AAxBA;AA2BA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AA/BA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAmCA;AAAA;AAAA;AAAA;AAAA;AACA;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnBA;AAAA;AAAA;AAAA;AACA;AADA;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AAQA;AAAA;AAAA;AACA;AACA;AA/EA;AAiFA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AALA;AAQA;AAAA;AAAA;AACA;AACA;AA9FA;AACA;AACA;AACA;AACA;AAJA;AAHA;AASA;AACA;;;AAwFA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAIA;AAAA;AACA;AAAA;AASA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAIA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAeA;;;;AA9KA;AACA;AAgLA;;;;A","sourceRoot":""}